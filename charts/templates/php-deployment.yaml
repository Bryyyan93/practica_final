apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-{{ .Values.php.name }}"
  namespace: {{ .Values.php.namespace }}
  labels:
    app: {{ .Values.php.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.php.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.php.name }}
    spec:
      initContainers:
      # Copiar los datos que estan en la imagen Docker y montarla en el pvc
      - name: {{ .Values.php.initcontainer.name }}
        image: "{{ .Values.php.image.repository }}:{{ .Values.php.image.tag }}"
        # Ejecuta un shell para procesar múltiples comandos necesarios para la migración de la base de datos
        command: ["/bin/sh", "-c"]
        args:
        - |
          echo "Esperar a que este lista la DDBB..." && \
          until mysqladmin ping -h {{ .Release.Name }}-{{ .Values.db.name }} --silent; do
            sleep 2;
            echo "Esperando...";
          done;
          echo "Database is ready!";

          # Copiar datos de la aplicación al volumen persistente para asegurar que los archivos están disponibles
          echo "Copiando los datos al pvc..." && \
          cp -R /var/www/* /mnt/www && \

          # Copiar los .env donde se encuentra la configuracion inicial
          if [ -f /var/www/.env ]; then
            cp /var/www/.env /mnt/www/.env;
            sed -i 's/^DB_HOST=.*/DB_HOST={{ .Release.Name }}-{{ .Values.db.name }}/' /mnt/www/.env;
            echo "Actualizado DB_HOST en .env";
          fi && \

          if [ -f /var/www/.env.example ]; then
            cp /var/www/.env.example /mnt/www/.env.example;
            sed -i 's/^DB_HOST=.*/DB_HOST={{ .Release.Name }}-{{ .Values.db.name }}/' /mnt/www/.env;
            echo "Actualizado DB_HOST en .env.example";
          fi && \

          # Asegurarnos que los archivos estan presentes
          echo "Verificando contenido del volumen persistente..." && \
          ls -la /mnt/www && \

          # Cambiar los permisos y propietarios
          echo "Cambiando permisos en el volumen persistente..." && \
          chown -R www-data:www-data /mnt/www && \
          chmod -R 775 /mnt/www && \
          echo "So long, and thanks for all the fish.!"
        volumeMounts:
        - name: {{ .Values.php.volumen.name }}
          mountPath: /mnt/www
      containers:
      - name: {{ .Values.php.name }}
        image: "{{ .Values.php.image.repository }}:{{ .Values.php.image.tag }}"
        ports:
        - containerPort: {{ .Values.php.port }}
        volumeMounts:
        - name: {{ .Values.php.volumen.name }}
          mountPath: /var/www
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Comprobar que composer existe antes de continuar
          if [ ! -f /var/www/composer.json ]; then
            echo "composer.json not found in /var/www. Exiting.";
            exit 1; # Salir del script con un código de error
          fi;
          
          # Cambiar los permisos y propietarios
          echo "Cambiando permisos en el volumen persistente..." && \
          chown -R www-data:www-data /var/www && \
          chmod -R 775 /var/www && \
          
          # Instalar las dependencias de composer
          echo "Instalando composer..." && \
          composer setup && \
          echo "So long, and thanks for all the fish.!" && \
          php-fpm 
        resources:
          requests:
            cpu: {{ .Values.php.resources.requests.cpu }}       # CPU mínima solicitada
            memory: {{ .Values.php.resources.requests.memory }} # Memoria mínima solicitada
          limits:
            cpu: {{ .Values.php.resources.limits.cpu }}         # CPU máxima permitida
            memory: {{ .Values.php.resources.limits.memory }}   # Memoria máxima permitida
        # php-fpm no está configurado para escuchar directamente en HTTP, se usa tcpSocket    
        livenessProbe:
          tcpSocket:
            port: {{ .Values.php.port }}
          initialDelaySeconds: {{ .Values.php.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.php.liveness.periodSeconds }}
        # php-fpm no está configurado para escuchar directamente en HTTP, se usa tcpSocket  
        readinessProbe:
          tcpSocket:
            port: {{ .Values.php.port }}
          initialDelaySeconds: {{ .Values.php.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.php.readiness.periodSeconds }}      
      volumes:
      - name: {{ .Values.php.volumen.name }}
        persistentVolumeClaim:
          claimName: {{ .Values.php.pvc.name }}
