name: release-build

on:
  workflow_run:
    workflows:
    - "test"
    branches: [ main ]
    types:
      - completed
permissions:
  contents: write
  packages: write
  issues: read
  pull-requests: read

jobs:
  semantic-release:
    if: "${{ github.event.workflow_run.conclusion == 'success' && !contains(github.event.commits[0].message, 'chore(release):') }}"
    name: Semantic Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4   

      - name: Unshallow
        run: git fetch --prune --unshallow  

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Setup yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
        env:
          YQ_VERSION: "v4.43.1"                  
      
      - uses: azure/setup-helm@v4
        with:
          version: '3.16.2'
  
      - name: Setup helm-docs
        run: |
          mkdir /tmp/helm-docs
          wget -qO /tmp/helm-docs/helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.tar.gz https://github.com/norwoodj/helm-docs/releases/download/v${HELM_DOCS_VERSION}/helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.tar.gz
          tar -xf /tmp/helm-docs/helm-docs_${HELM_DOCS_VERSION}_Linux_x86_64.tar.gz -C /tmp/helm-docs
          sudo mv /tmp/helm-docs/helm-docs /usr/local/bin/helm-docs
          sudo chmod +x /usr/local/bin/helm-docs
        env:
          HELM_DOCS_VERSION: "1.5.0"
  
      - name: Create empty semantic_release_version.txt file
        run: touch semantic_release_version.txt
  
      - name: Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --debug | tee semantic_release_output.txt

          # Si Semantic Release no genera una nueva versión, capturamos la última versión existente
          if grep -q "There are no relevant changes, so no new version is released" semantic_release_output.txt; then
            echo "No new version generated. Fetching the latest version tag."
            VERSION=$(git describe --tags --abbrev=0)
          else
            # Extrae la versión publicada por semantic-release
            VERSION=$(grep -oP '(?<=Published release ).*' semantic_release_output.txt)
            echo "$VERSION" > semantic_release_version.txt
          fi  

      - name: Debug semantic_release_version.txt
        run: |
          ls -l semantic_release_version.txt
          cat semantic_release_version.txt || echo "File is empty or does not exist"

      - name: Get the version
        id: get_version
        run: |
          if [ -s semantic_release_version.txt ]; then
            VERSION=$(cat semantic_release_version.txt)
            echo "Version found: $VERSION"
            echo VERSION=$VERSION >> $GITHUB_ENV
          else  
            echo "No version generated"
            exit 1
          fi  
      
      #  herramienta de emulación para construir imágenes Docker multiplataforma      
      - name: Set up QEMU
        if: ${{ env.VERSION != '' }}
        uses: docker/setup-qemu-action@v3   
        
      - name: Set up Docker Buildx
        if: ${{ env.VERSION != '' }}
        uses: docker/setup-buildx-action@v3

      - name: Docker Login in GHCR
        if: ${{ env.VERSION != '' }}
        uses: docker/login-action@v3
        id: configure-login-ghcr
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: ${{ env.VERSION != '' }}
        uses: docker/login-action@v3
        id: configure-login-dockerhub
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - id: repo-basename
        run: |
          echo "value=`basename ${{ github.repository }}`" >> $GITHUB_OUTPUT
        shell: bash

      - name: Docker meta
        if: ${{ env.VERSION != '' }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/${{ steps.repo-basename.outputs.value }}
            ghcr.io/${{ github.repository }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ steps.repo-basename.outputs.value }}:${{ env.VERSION }}
            ghcr.io/${{ github.repository }}:${{ env.VERSION }}
            #type=semver,pattern={{version}},value=${{ env.VERSION }}

      - name: Debug Docker metadata
        run: |
            echo "Tags: ${{ steps.meta.outputs.tags }}"
            echo "Labels: ${{ steps.meta.outputs.labels }}"            

#      - name: Build and push Docker image
#        if: ${{ env.VERSION != '' }}
#        uses: docker/build-push-action@v6
#        with:
#          context: . # Contexto de construcción
#          file: ./Dockerfile # Ruta al Dockerfile
#          platforms: linux/amd64,linux/arm64 
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
          

      - name: Update helm chart files to latest version
        if: ${{ env.VERSION != '' }}
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository }}" yq -i '.image.repository = strenv(IMAGE_NAME)' ./charts/values.yaml

      - name: Package helm chart with new version
        if: ${{ env.VERSION != '' }}
        run: |
          helm package ./charts -d /tmp

      - name: Upload helm package chart with new version
        if: ${{ env.VERSION != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: helm_package_${{ env.VERSION }}
          path: /tmp/practica-final-${{ env.VERSION }}.tgz

    outputs:
      version: ${{ env.VERSION }}            

  publish-version:
    if: "${{ github.event.workflow_run.conclusion == 'success' && needs.semantic-release.outputs.version != '' }}"
    name: PublishVersion
    runs-on: ubuntu-latest
    needs: semantic-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Set Version ENV Variables
        run: |
          echo VERSION=${{ needs.semantic-release.outputs.version }} >> $GITHUB_ENV  

      - name: List uploaded artifacts
        run: |
          echo "Checking uploaded artifacts:"
          ls -l /tmp          

      - name: Clean version for artifacts
        run: |
          CLEAN_VERSION=$(echo "${{ needs.semantic-release.outputs.version }}" | sed 's/ on default channel//')
          echo "cleaned= $CLEAN_VERSION 
          echo "CLEAN_VERSION=${CLEAN_VERSION}" >> $GITHUB_ENV
                  
      # Download helm chart package to upload as release asset
      - name: Download helm package
        uses: actions/download-artifact@v4
        with:
          name: helm_package_${{ env.CLEAN_VERSION }} 
           
      # Upload helm chart tgz file to GitHub release assets associated with version
      - name: Upload helm chart tgz file
        uses: softprops/action-gh-release@v2
        id: upload-helm-chart-tgz
        if: ${{ env.VERSION != '' }}
        with:
          append_body: true
          name: "v${{ env.VERSION }}"
          tag_name: "v${{ env.VERSION }}"
          files: |
            practica-final-${{ env.VERSION }}.tgz      